import multiprocessing
import os
import sys
from itertools import chain
import json
import glob
import math
from typing import List
import shutil
import tempfile
import numpy as np
import geopandas as gpd
import osgeo.gdal as gdal
import pygeoprocessing.geoprocessing as pygeo
sys.path.append('..')
from wbnci.preprocessing import make_scenario_map, make_scenario_map_pv, make_intersection_mask
from wbnci.workers import worker
from wbnci.utils import read_to_array, read_lulc_table


"""
All scenario creation functions require the same inputs:
    `files`: a dictionary specifying filepaths to various rasters (see below)
    `lu_codes`: a dictionary specifying lu codes corresponding to different
        categories, as generated by `utils.read_lulc_table`
    `target_folder`: filepath to desired output folder. 

`files` should contain:
    files = {
        'base_lulc': PATH,
        'sustainable_current': PATH,
        'restoration': PATH,
        'potential_vegetation': PATH,
        'slope_threshold_expansion': PATH,
        'slope_threshold_intensification': PATH,
        'rainfed_suitability': PATH,
        'irrigated_suitability': PATH,
        'riparian_buffer': PATH),
        'sustainable_irrigation': PATH,
        'soil_suitability': PATH,
        'grazing_suitability': PATH,
        'forestry_suitability': PATH
    }


"""


GDT_Byte_NODATA = 7
all_lu_codes = [10, 11, 12, 20, 30, 40, 50, 60, 61, 62, 70, 71, 72, 80, 81, 82, 90,
                100, 110, 120, 121, 122, 130, 140, 150, 151, 152, 153, 160, 170, 180, 190,
                200, 201, 202, 210, 220]

ag_lucodes = [10, 11, 12, 15, 16, 20, 25, 26, 30, 40]
natural_lucodes = [50, 60, 61, 62, 70, 71, 72, 80, 81, 82, 90, 100, 110, 120, 121,
                   122, 130, 140, 150, 151, 152, 153, 160, 170, 180]

new_ag_codes = [15, 16, 25, 26]

lu_codes = read_lulc_table(os.path.join(os.path.dirname(__file__), 'lulc_codes.csv'))
pasture_codes = lu_codes['grazing_codes']
forestry_codes = lu_codes['forestry_codes']

crop_extensification_codes = np.unique(list(chain(natural_lucodes, pasture_codes, forestry_codes)))


def execute():
    pass


def suit_map_current_practices(target_folder, **files):
    """
        + slope threshold (expansion), rainfed suitability, soil suitability
        + not protected area
    """

    needed_rasters = [
        'current_lulc_masked',
        'crop_value_current',
        'slope_threshold_expansion',
        'rainfed_suitability',
        'soil_suitability',
        'protected_areas',
    ]

    lulc_raster_info = pygeo.get_raster_info(files['current_lulc_masked'])

    def local_op(clm, cvc, st, rs, ss, pa):
        result = np.zeros(clm.shape, dtype=np.int8)
        result[np.all(
            [~np.isnan(cvc), st==1, rs==1, ss==1, pa == 7],
            axis=0)] = 1
        result[clm == 0] = 255

        return result
    
    src_bands = [(files[rn], 1) for rn in needed_rasters]
    target_file = os.path.join(target_folder, 'current_practices.tif')

    pygeo.raster_calculator(
        src_bands,
        local_op,
        target_file,
        gdal.GDT_Byte,
        255,
        raster_driver_creation_tuple=('GTIFF', ('TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
                'BLOCKXSIZE=256', 'BLOCKYSIZE=256'))
    )


def suit_map_intensified_rainfed(target_folder, **files):
    needed_rasters = [
        'current_lulc_masked',
        'slope_threshold_intensification',
        'rainfed_suitability',
        'crop_value_intensified_rainfed',
        'soil_suitability',
        'protected_areas'
    ]

    lulc_raster_info = pygeo.get_raster_info(files['current_lulc_masked'])

    def local_op(clm, st, rs, cvir, ss, pa):
        result = np.zeros(st.shape)
        result[np.all([
            st==1, rs==1, ss==1, pa==7, ~np.isnan(cvir)], 
            axis=0)] = 1
        result[clm == lulc_raster_info['nodata']] = 255

        return result
    
    src_bands = [(files[rn], 1) for rn in needed_rasters]
    target_file = os.path.join(target_folder, 'intensified_rainfed.tif')

    pygeo.raster_calculator(
        src_bands,
        local_op,
        target_file,
        gdal.GDT_Byte,
        255,
        raster_driver_creation_tuple=('GTIFF', ('TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
                'BLOCKXSIZE=256', 'BLOCKYSIZE=256'))
    )


def suit_map_intensified_irrigated(target_folder, **files):
    needed_rasters = [
        'current_lulc_masked', 
        'slope_threshold_intensification', 
        'crop_value_intensified_irrigated',
        'irrigated_suitability',
        'sustainable_irrigation',
        'soil_suitability',
        'protected_areas'
    ]

    def local_op(clm, st, cvii, irs, si, ss, pa):
        """
        clm: current lulc masked
        st: slope threshold for intensification
        cvii: crop_value_intensified_irrigated
        irs: suitable for irrigated crops
        si: sustainable irrigation mask
        ss: soil suitability mask
        """
        result = np.zeros(clm.shape)
        result[np.all([
            ~np.isnan(cvii), st==1, irs==1, si==1, ss==1, pa==7
        ], axis=0)] = 1
        result[clm == 0] = 255
        return result
    
    src_bands = [(files[rn], 1) for rn in needed_rasters]
    target_file = os.path.join(target_folder, 'intensified_irrigated.tif')

    pygeo.raster_calculator(
        src_bands,
        local_op,
        target_file,
        gdal.GDT_Byte,
        255,
        raster_driver_creation_tuple=('GTIFF', ('TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
                'BLOCKXSIZE=256', 'BLOCKYSIZE=256'))
    )
